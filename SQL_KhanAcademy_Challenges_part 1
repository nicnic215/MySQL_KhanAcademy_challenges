
/*Challenge 1 : Book list database
Step 1
What are your favorite books? You can make a database table to store them in! In this first step, create a table to store your list of books. 
It should have columns for id, name, and rating.
Answer */

CREATE TABLE Books(
    ID INTEGER, 
    Name TEXT, 
    Rating REAL);

INSERT INTO books VALUES (1, "Intro to SQL", 8);

INSERT INTO books VALUES (2, "The History of Mathematics", 8);

INSERT INTO books VALUES (3, "Investment Theory", 6);

SELECT * FROM Books;



  
/*Challenge 2 : Box office hits database 
Select them all

This database contains an incomplete list of box office hits and their release year. 
In this challenge, you're going to get the results back out of the database in different ways! In this first step, just select all the movies.*/

CREATE TABLE movies (id INTEGER PRIMARY KEY, name TEXT, release_year INTEGER);

INSERT INTO movies VALUES (1, "Avatar", 2009);

INSERT INTO movies VALUES (2, "Titanic", 1997);

INSERT INTO movies VALUES (3, "Star Wars: Episode IV - A New Hope", 1977);

INSERT INTO movies VALUES (4, "Shrek 2", 2004);

INSERT INTO movies VALUES (5, "The Lion King", 1994);

INSERT INTO movies VALUES (6, "Disney's Up", 2009);
 

SELECT * FROM movies;

/*Filter recent movies
Now, add a second query after the first, that retrieves only the movies that were released in the year 2000 or later, not before. 
Sort the results so that the earlier movies are listed first. You should have 2 SELECT statements after this step. */

SELECT * 
FROM movies WHERE release_year >= 2000 ORDER BY release_year ;



/*Challenge 3 : TODO list database stats
Step 1

Here's a table containing a TODO list with the number of minutes it will take to complete each item. 
Insert another item to your todo list with the estimated minutes it will take */


CREATE TABLE todo_list (id INTEGER PRIMARY KEY, item TEXT, minutes INTEGER);

INSERT INTO todo_list VALUES (1, "Wash the dishes", 15);

INSERT INTO todo_list VALUES (2, "vacuuming", 20);

INSERT INTO todo_list VALUES (3, "Learn some stuff on KA", 30);

INSERT INTO todo_list VALUES (4, "Practise SQL", 60);

/*Select the SUM of minutes it will take to do all of the items on your TODO list. 
You should only have one SELECT statement.*/

SELECT SUM(minutes) FROM todo_list;


/*Spin-off of "Project: Design a store database"
Create your own store! Your store should sell one type of things, like clothing or bikes, whatever you want your store to specialize in. 
You should have a table for all the items in your store, and at least 5 columns for the kind of data you think you'd need to store. 
You should sell at least 8 items, and use select statements to order your items by price and show at least one statistic about the items. */


CREATE TABLE stationaries (id integer primary key autoincrement, item text, price integer, quantity integer, location text);

INSERT INTO stationaries VALUES (1,'pencil', 2,50,'1E');

INSERT INTO stationaries VALUES (2,'ruler', 5,50,'1f');

INSERT INTO stationaries VALUES (3, 'eraser', 2,50,'1d');

INSERT INTO stationaries VALUES (4, 'notebooks', 22, 30,'1p');

INSERT INTO stationaries VALUES (5, 'pen', 5,50,'1a');

INSERT INTO stationaries VALUES (6, 'color pen', 4 ,20,'1c');

INSERT INTO stationaries VALUES (7, 'tape', 12,32,'1E');

INSERT INTO stationaries VALUES (8, 'staple', 23,15,'1s');

INSERT INTO stationaries VALUES (9, 'paper', 20,10,'1h');

INSERT INTO stationaries VALUES (10,'calendar', 70, 10,'1E');

INSERT INTO stationaries VALUES (11, 'case', 10,50,'1a');

INSERT INTO stationaries VALUES (12, 'pad', 2,30,'1s');

INSERT INTO stationaries VALUES (13, 'sharpener', 23 ,53,'1d');

INSERT INTO stationaries VALUES (14, 'envelope', 2,50,'1s');

INSERT INTO stationaries VALUES (15, 'bottle', 41,20,'1E');

select * from stationaries;

select * from stationaries order by quantity;

select sum(quantity*price) from stationaries;

